LAB NAME: Reflected XSS into HTML context with most tags and attributes blocked

DESCRIPTION
This lab contains a reflected XSS vulnerability in the search functionality but uses a web application firewall (WAF) to protect against common XSS vectors.
To solve the lab, perform a cross-site scripting attack that bypasses the WAF and calls the print() function.
NOTE: Your solution must not require any user interaction. Manually causing print() to be called in your own browser will not solve the lab.

DIFFICULTY LEVEL: Practitioner.

LAB LINK: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked

STEPS I USED TO SOLVE THIS LAB

 Solution
- Inject a standard XSS vector, such as:
<img src=1 onerror=print()>
- Observe that this gets blocked. In the next few steps, we'll use use Burp Intruder to test which tags and attributes are being blocked.
- Open Burp's browser and use the search function in the lab. Send the resulting request to Burp Intruder.
- In Burp Intruder, in the Positions tab, replace the value of the search term with: <>
- Place the cursor between the angle brackets and click "Add §" twice, to create a payload position. The value of the search term should now look like: <§§>
- Visit the XSS cheat sheet and click "Copy tags to clipboard".
- In Burp Intruder, in the Payloads tab, click "Paste" to paste the list of tags into the payloads list. Click "Start attack".
- When the attack is finished, review the results. Note that all payloads caused an HTTP 400 response, except for the body payload, which caused a 200 response.
- Go back to the Positions tab in Burp Intruder and replace your search term with:
<body%20=1>
- Place the cursor before the = character and click "Add §" twice, to create a payload position. The value of the search term should now look like: <body%20§§=1>
- Visit the XSS cheat sheet and click "copy events to clipboard".
- In Burp Intruder, in the Payloads tab, click "Clear" to remove the previous payloads. Then click "Paste" to paste the list of attributes into the payloads list. Click "Start attack".
- When the attack is finished, review the results. Note that all payloads caused an HTTP 400 response, except for the onresize payload, which caused a 200 response.
- Go to the exploit server and paste the following code, replacing YOUR-LAB-ID with your lab ID:
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>
- Click "Store" and "Deliver exploit to victim".

<iframe src="https://0af800f1040d9057816d759700a900a1.web-security-academy.net//?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>
EXPLANATION OF PAYLOAD 
- The <iframe> tag is used to embed another webpage within the current webpage.
- The src attribute specifies the URL of the webpage to be embedded.
- "%22%3E%3Cbody%20onresize=print()%3E" is URL-encoded and decodes to:
  "><body onresize=print()> :This string closes any existing search attribute value (") and injects a new <body> tag with an onresize event handler that triggers the print() function when the window is resized.
- onresize=print() is a JavaScript event that automatically opens the browser's print dialog when the browser window is resized.
- The onload event is executed when the <iframe> finishes loading.
- The this.style.width='100px' part adjusts the width of the <iframe> to 100px upon loading.


